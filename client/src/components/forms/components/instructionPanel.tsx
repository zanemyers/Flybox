import ReactMarkdown, { type Components } from "react-markdown";

interface InstructionStep {
  icon: string;
  text: string;
}

interface InstructionPanelProps {
  app: string;
  description: string;
  steps: InstructionStep[];
  defaultsDescription?: string;
}

const stepComponent: Components = {
  p: ({ node, ...props }) => <span {...props} />, // inline text instead of <p>
};

export default function InstructionPanel(props: InstructionPanelProps) {
  return (
    <div className="p-4 bg-light border rounded flex-fill d-flex flex-column">
      {/* What the tool does */}
      <h2 className="h4 mb-2">🛠️ What This Tool Does</h2>
      <ReactMarkdown>{props.description}</ReactMarkdown>

      {/* Steps */}
      <h3 className="h5 mb-2">📋 How to Use It</h3>
      <div className="steps">
        {props.steps.map((step, i) => {
          return (
            <div key={i}>
              <span className="icon">{step.icon}</span>
              <ReactMarkdown components={stepComponent}>
                {step.text}
              </ReactMarkdown>
            </div>
          );
        })}
        <p className="mt-2 small text-muted">
          For more detailed instructions, see the{" "}
          <a href={`/docs?tab=${props.app}`}>{props.app} documentation</a>.
        </p>
      </div>

      {/* Defaults */}
      {props.defaultsDescription && (
        <>
          <h3 className="h5 mb-2">ℹ️ About the Defaults</h3>
          <ReactMarkdown>{props.defaultsDescription}</ReactMarkdown>
        </>
      )}

      {/* Privacy */}
      <p className="text-muted small mb-0">
        🔒 <strong>Privacy Notice:</strong> Your inputs are never stored. Only
        the output files generated by this tool are retained temporarily to
        facilitate downloads.
      </p>
    </div>
  );
}
